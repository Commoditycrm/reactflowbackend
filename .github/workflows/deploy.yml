name: CI / Deploy Backend to Lightsail

on:
  push:
    branches: ["**"]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install deps
        run: yarn install --immutable

      - name: Build
        run: yarn build

  deploy-backend:
    name: Deploy to Lightsail (main only)
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.LIGHTSAIL_KEY }}  # your Lightsail .pem contents

      - name: Trust server host key
        run: ssh-keyscan -H ${{ secrets.LIGHTSAIL_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Backend
        env:
          HOST: ${{ secrets.LIGHTSAIL_HOST }}   # e.g., 3.129.39.38
          USER: ${{ secrets.LIGHTSAIL_USER }}   # ubuntu
        run: |
          ssh "$USER@$HOST" << 'EOF'
            set -euo pipefail

            APP_ROOT="/var/www/app"
            BACKEND_DIR="$APP_ROOT/backend"

            # ensure directories/ownership
            sudo mkdir -p "$BACKEND_DIR"
            sudo chown -R "$USER":"$USER" "$APP_ROOT"

            cd "$APP_ROOT"
            # repo already cloned on server; just update it
            git fetch --all
            git reset --hard origin/main

            # build backend
            cd "$BACKEND_DIR"
            corepack enable || true
            yarn install --immutable
            yarn build

            # restart via ecosystem (preferred)
            cd "$APP_ROOT"
            if [ -f "ecosystem.config.js" ] || [ -f "ecosystem.config.cjs" ]; then
              pm2 start ecosystem.config.js --only backend --update-env || true
              pm2 restart backend --update-env || true
            else
              # fallback: direct entry file (adjust if different)
              pm2 start "$BACKEND_DIR/dist/server.js" --name backend || pm2 restart backend --update-env
            fi

            pm2 save
          EOF
