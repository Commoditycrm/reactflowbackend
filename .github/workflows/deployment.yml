name: CI & Deploy (Lightsail + PM2)

on:
  push:
    branches: ["main"]           # deploy on main
  workflow_dispatch: {}          # manual run

jobs:
  build:
    name: Build (backend only)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack + Yarn 4.10.3
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate
          yarn -v

      - name: Prepare Yarn cache dir
        run: mkdir -p .yarn/cache

      - name: Cache Yarn artifacts
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install deps
        run: yarn install --immutable

      - name: Build (only if script exists)
        run: |
          if yarn run | grep -qE '(^|[[:space:]])build($|[[:space:]])'; then
            yarn build
          else
            echo "No build script found, skipping."
          fi

  deploy:
    name: Deploy to Lightsail (PM2)
    runs-on: ubuntu-latest
    needs: build
    steps:
      # write the SSH key from base64 to a file (avoids newline/format issues)
      - name: Write SSH key
        run: |
          echo "${{ secrets.LIGHTSAIL_KEY_B64 }}" | base64 -d > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

      # (optional) pre-populate known_hosts; we also pass fingerprint to ssh-action
      - name: Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t ed25519 "${{ secrets.LIGHTSAIL_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy over SSH (git pull + install/build + PM2 reload)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key_path: /tmp/deploy_key
          port: 22
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          script_stop: true
          debug: true
          script: |
            set -e
            APP_DIR=${{ secrets.APP_DIR }}
            cd "$APP_DIR"

            # update code
            if [ -d .git ]; then
              git fetch --all --prune
              git checkout main
              git reset --hard origin/main
            else
              echo "Not a git repo. Clone your backend into $APP_DIR first."; exit 1
            fi

            # Yarn 4 on server
            corepack enable
            corepack prepare yarn@4.10.3 --activate
            yarn -v

            # install + build
            yarn install --immutable
            if yarn run | grep -qE '(^|[[:space:]])build($|[[:space:]])'; then
              yarn build
            fi

            # PM2 reload (expects ecosystem.config.js at $APP_DIR)
            pm2 startOrReload ecosystem.config.js --update-env
            pm2 save
            pm2 ls
